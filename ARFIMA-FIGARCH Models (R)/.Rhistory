# creating time series
library(zoo)
# plotting
library(ggplot2)
library(ggthemes) # https://jrnold.github.io/ggthemes/
library(patchwork)
library(grid)
library(gridExtra)
library(gt)
library(formattable)
# forecasting
library(forecast)
library(arfima)
library(tseries)
library(dplyr)
library(rugarch)
library(lmtest)
library(dgof)
library(nortest)
library(goftest)
library(FinTS)
library(rugarch)
library(fGarch)
library(fracdiff)
library(MASS)
### loading data ===============================================================
data = read.csv("./Data/BITCOIN.csv", header = TRUE)
# convert to time series
data$Price = log(data$Price)
data$Date = as.Date(data$Date, format="%m/%d/%y")
tsData <- zoo(data$Price, order.by = data$Date)
data$Obs = as.numeric(data$Date - min(data$Date) + 1)
# find, filter, drop NAs
sum(is.na(data$Price))
dataWithNA <- data[apply(is.na(data), 1, any), ]
data = data[data$Date > as.Date("2015-01-18"), ]
data <- na.omit(data)
stats_plot(data, "Price")
source("./functions_custom.R")
stats_plot(data, "Price")
# differenced
diffData = data[2:nrow(data),]
diffData$Price = diff(data$Price)
stats_plot(diffData, "Price")
# fractionally differenced
fracModel = fracdiff(data$Price, nar=0, nma=0)
fracData = data
fracData$Price = diffseries(data$Price, fracModel$d)
stats_plot(fracData, "Price")
trimFracData = fracData[500:nrow(fracData),]
stats_plot(trimFracData, "Price")
# ARFIMA
arfimaModel = NULL
arfimaAICc = 0
for (p in 0:2)
{
for (q in 0:2)
{
# ARFIMA (dynamic mean)
testModel = arfima(data$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=TRUE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 1)  # additional param for dynamic mean
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
# ARFIMA (no dynamic mean)
testModel = arfima(data$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=FALSE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 0)
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
}
}
source("./functions_custom.R")
data = read.csv("./Data/BITCOIN.csv", header = TRUE)
# ARFIMA
arfimaModel = NULL
arfimaAICc = 0
for (p in 0:2)
{
for (q in 0:2)
{
# ARFIMA (dynamic mean)
testModel = arfima(fracData$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=TRUE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 1)  # additional param for dynamic mean
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
# ARFIMA (no dynamic mean)
testModel = arfima(fracData$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=FALSE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 0)
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
}
}
meanModel = arfimaModel
resids = residuals(meanModel)[[1]]
residsSqrd = residuals(meanModel)[[1]]^2
fittedDiff = fitted(meanModel)[[1]]
fittedLog = data$Price - resids
# fits
fittedData = data[20:nrow(data),]
fittedData$FittedDiff = fittedDiff[20:length(fittedDiff)]
fittedDiff
# fractionally differenced
fracModel = fracdiff(data$Price, nar=0, nma=0)
data = read.csv("./Data/BITCOIN.csv", header = TRUE)
# convert to time series
data$Price = log(data$Price)
data$Date = as.Date(data$Date, format="%m/%d/%y")
tsData <- zoo(data$Price, order.by = data$Date)
data$Obs = as.numeric(data$Date - min(data$Date) + 1)
# find, filter, drop NAs
sum(is.na(data$Price))
dataWithNA <- data[apply(is.na(data), 1, any), ]
data = data[data$Date > as.Date("2015-01-18"), ]
data <- na.omit(data)
diffData = data
diffData$Price = c(NA, diff(data$Price))
# fractionally differenced
fracModel = fracdiff(data$Price, nar=0, nma=0)
fracData = data
fracData$Price = diffseries(data$Price, fracModel$d)
trimFracDiff = fracData[50:nrow(fracData),]
# ARFIMA
arfimaModel = NULL
arfimaAICc = 0
for (p in 0:2)
{
for (q in 0:2)
{
# ARFIMA (dynamic mean)
testModel = arfima(data$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=TRUE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 1)  # additional param for dynamic mean
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
# ARFIMA (no dynamic mean)
testModel = arfima(data$Price, order=c(p, 0, q), fixed=list(frac=fracModel$d), dmean=FALSE)
resids = residuals(testModel)[[1]]
testAICc = custom_AICc(resids, p, q, 0)
if (testAICc < arfimaAICc)
{
arfimaAICc = testAICc
arfimaModel = testModel
}
}
}
meanModel = arfimaModel
resids = residuals(meanModel)[[1]]
residsSqrd = residuals(meanModel)[[1]]^2
fittedDiff = fitted(meanModel)[[1]]
fittedLog = data$Price - resids
# fits
fittedData = data[20:nrow(data),]
fittedData$FittedDiff = fittedDiff[20:length(fittedDiff)]
fittedData$Fitted = fittedData$Price - resids[20:length(resids)]
fittedData$Resids = resids[20:length(resids)]
fittedData$ResidsSqrd = residsSqrd[20:length(residsSqrd)]
stats_plot(fittedData, "Fitted")
stats_plot(fittedData, "FittedDiff")
stats_plot(fittedData, "Resids")
stats_plot(fittedData, "ResidsSqrd")
fitPlot(data, "Price", fittedData, "Fitted")
source("./functions_custom.R")
fitPlot(data, "Price", fittedData, "Fitted")
fit_plot(data, "Price", fittedData, "Fitted")
fit_plot(data[20:nrow(data)], "Price", fittedData, "Fitted")
fit_plot(data[20:nrow(data),], "Price", fittedData, "Fitted")
nrow(dataa)
nrow(data)
nrow(fittedData)
head(fittedData)
head(data)
nrow(
fit_plot(data[20:nrow(data),])
)
nrow(data[20:nrow(data),])
nrow(fittedData)
# residuals
residualsData = data
residualsData$Resids = residuals(arfimaModel)[[1]]
residualsData$ResidsSqrd = residuals(arfimaModel)[[1]]^2
### fit ARCH / GARCH / FIGARCH
### FIGARCH
figarchSpec  = ugarchspec(variance.model=list(model="fiGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,0), include.mean=FALSE),
distribution.model="std") # students from ARFIMA (not final resids)
figarchModel = ugarchfit(spec=figarchSpec, data=fittedData$Resids)
# manual fit (fitted() and residuals() fail)
omega = coef(figarchModel)[["omega"]]
alpha1 = coef(figarchModel)[["alpha1"]]
beta1 = coef(figarchModel)[["beta1"]]
delta = coef(figarchModel)[["delta"]]
figarchVar = numeric(length(fittedData$Resids))
figarchVar[1] = var(fittedData$Resids) # initialize first unconditional variance
for (t in 2:length(fittedData$Resids))
{
fracLag = (1 - (1 - delta) * (t - 1)^(-delta)) * figarchVar[t - 1]
figarchVar[t] = omega + alpha1 * (fittedData$Resids[t - 1]^2) + beta1 * fracLag
}
figarchResids = fittedData$Resids / sqrt(figarchVar)
fittedFIGARCHResiduals = data
fittedFIGARCHResiduals$Fitted = figarchVar
fittedFIGARCHResiduals = fittedData
fittedFIGARCHResiduals$Fitted = figarchVar
fittedFIGARCHResiduals$Residuals = figarchResids
fittedFIGARCHResiduals = fittedData
fittedFIGARCHResiduals$Fitted = figarchVar
fittedFIGARCHResiduals$Residuals = figarchResids
fit_plot(fittedFIGARCHResiduals, "Fitted", fittedData, "ResidsSqrd")
stats_plot(fittedFIGARCHResiduals, "Residuals")
figarchAICC = custom_AICc(likelihood(figarchModel), length(coef(figarchModel)) - 1 + 1, nrow(fittedData))
### GARCH
garchSpec  = ugarchspec(variance.model=list(model="fGARCH", submodel="GARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,0), include.mean=FALSE),
distribution.model="std")
garchModel = ugarchfit(spec=garchSpec, data=fittedData$Resids)
# manual fit (fitted() and residuals() fail)
omega = coef(garchModel)[["omega"]]
alpha1 = coef(garchModel)[["alpha1"]]
beta1 = coef(garchModel)[["beta1"]]
garchVar = numeric(length(fittedData$Resids))
garchVar[1] = omega / (1 - alpha1 - beta1) # initialize first unconditional variance
for (t in 2:length(fittedData$Resids))
{
garchVar[t] = omega + alpha1 * (fittedData$Resids[t - 1]^2) + beta1 * garchVar[t-1]
}
garchResids = fittedData$Resids / sqrt(garchVar)
fittedGARCHResiduals = fittedData
fittedGARCHResiduals$Fitted = garchVar
fittedGARCHResiduals$Residuals = garchResids
fitPlot(fittedGARCHResiduals, "Fitted", fittedData, "ResidsSqrd")
fit_plot(fittedGARCHResiduals, "Fitted", fittedData, "ResidsSqrd")
stats_plot(fittedGARCHResiduals, "Residuals")
fit_plot(fittedGARCHResiduals, "Fitted", fittedData, "ResidsSqrd")
garchAICC = custom_AICc(likelihood(garchModel), length(coef(garchModel)) - 1, nrow(fittedData))
n = nrow(fittedData)
archModel = NULL
archAICC = 0
stats_plot(fittedGARCHResiduals, "Residuals")
garchAICC = custom_AICc(garchResids, 1, 1, 1) # additional parameters for estimated conditional variances
garchAICC
stats_plot(figarchFit, "FittedVar")
